name: build-and-lint

# triggers: define when this workflow should run
# triggers on push to these branches 
on:
    push:
        branches: [main, dev]
    pull_request:
        branches: [main, dev]


# Define a job( you can have multiple jobs here that will run )
jobs:
  build-and-lint:
    runs-on: ubuntu-latest
    steps:
        - name: Checkout repo
          uses: actions/checkout@v3

        - name: Setup Node
          uses: actions/setup-node@v3
          with:
            node-version: 22

        - name: Install backend dependencies
          working-directory: server
          run: npm ci

        - name: Lint backend
          working-directory: server
          run: npm run lint -- --max-warnings=0

        - name: Install frontend dependencies
          working-directory: client
          run: npm ci

        - name: Lint frontend
          working-directory: client
          run: npm run lint -- --max-warnings=0

        - name: Build backend Docker image
          run: docker build -t backend ./server

        - name: Build frontend Docker image
          run: docker build -t frontend ./client

#  name: ci-cd

# on:
#   push:
#     branches: [main]

# jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Add EC2 host to known_hosts

        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}

      - name: Write SSH key

        run: |
          echo "${EC2_KEY}" > ec2_key.pem
          chmod 600 ec2_key.pem
        env:
          EC2_KEY: ${{ secrets.EC2_KEY }}

      - name: Deploy on EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_APP_DIR: ${{ secrets.EC2_APP_DIR }}
        run: |
          ssh -i ec2_key.pem ${EC2_USER}@${EC2_HOST} << EOF
            set -e
            cd "${EC2_APP_DIR}" || exit 1

            # fetch latest code
            git fetch --all
            git reset --hard origin/main

            # rebuild containers
            docker compose up -d --build

            # clean old images
            docker image prune -f

            docker compose ps
          EOF